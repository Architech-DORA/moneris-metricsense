name: ECR Image build and push
env:
  ECR_NAME: icann_poc_ecr
  AWS_DEFAULT_REGION: us-east-1
  AWS_DEFAULT_OUTPUT: json
  AWS_ACCOUNT_ID: 456519947111
on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to deploy'
        required: true
permissions:
    id-token: write
    contents: read
jobs:
  build-and-push-builder:
    name: Build and Push devlake builder
    runs-on: self-hosted
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.branch }}        
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Install AWS
        run: | 
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --update
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::456519947111:role/icann-poc-dora-gh-aws
          role-session-name: Github
          aws-region: us-east-1
  
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        
      - name: Setup ECR
        run: |
          # Login to AWS ECR
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
  
      - name: Build and push lake image
        run: |
          docker buildx create --use --name=builder
          docker buildx inspect --bootstrap
          docker buildx build  --cache-from type=registry,ref=${{ env.ECR_NAME }}/moneris-devlake:amd64-builder --tag ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/moneris-devlake:amd64-builder --platform linux/amd64 --target builder --push ./backend

  build-and-push-base:
    name: Build and Push moneris-devlake base
    runs-on: self-hosted
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.branch }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Install AWS
        run: | 
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --update
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::456519947111:role/icann-poc-dora-gh-aws
          role-session-name: Github
          aws-region: us-east-1
  
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        
      - name: Setup ECR
        run: |
          # Login to AWS ECR
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
  
      - name: Build and push lake image
        run: |
          docker buildx create --use --name=builder
          docker buildx inspect --bootstrap
          docker buildx build --cache-from type=registry,ref=${{ env.ECR_NAME }}/moneris-devlake:base --tag ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/moneris-devlake:base --platform linux/amd64,linux/arm64 --target base --push ./backend
  build-devlake:
    needs: build-and-push-builder
    name: Build and cache devlake
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: ["arm64"]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.branch }}
      - name: Get short sha
        id: get_short_sha
        run: echo "SHORT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Install AWS
        run: | 
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --update
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::456519947111:role/icann-poc-dora-gh-aws
          role-session-name: Github
          aws-region: us-east-1
  
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        
      - name: Setup ECR
        run: |
          # Login to AWS ECR
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
  
      - uses: actions/cache@v3
        with:
          path: /tmp/devlake-build-cache-${{ matrix.platform }}
          key: buildx-devlake-build-cache-${{ github.run_id }}-${{ matrix.platform }}
      - name: Build and cache lake build
        run: |
          docker buildx create --use --name=builder
          docker buildx inspect --bootstrap
          docker buildx build \
            --cache-from ${{ env.ECR_NAME }}/devlake:amd64-builder \
            --cache-to type=local,mode=min,dest=/tmp/devlake-build-cache-${{ matrix.platform }} \
            --build-arg TAG=${{ github.ref_name }} \
            --build-arg SHA=${{ steps.get_short_sha.outputs.SHORT_SHA }} \
            --target build \
            --platform linux/${{ matrix.platform }} \
            --tag ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/moneris-devlake:build-cache-${{ matrix.platform }} \
            ./backend          
  build-and-push-devlake:
    needs: [build-devlake, build-and-push-base]
    name: Build and Push devlake image
    runs-on: self-hosted
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.branch }}
      - name: Get short sha
        id: get_short_sha
        run: echo "SHORT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Install AWS
        run: | 
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --update
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::456519947111:role/icann-poc-dora-gh-aws
          role-session-name: Github
          aws-region: us-east-1
  
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        
      - name: Setup ECR
        run: |
          # Login to AWS ECR
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
  
      - uses: actions/cache@v3
        with:
          path: /tmp/devlake-build-cache-amd64
          key: buildx-devlake-build-cache-${{ github.run_id }}-amd64
      - uses: actions/cache@v3
        with:
          path: /tmp/devlake-build-cache-arm64
          key: buildx-devlake-build-cache-${{ github.run_id }}-arm64
      - name: Get push tags
        id: get_push_tags
        run: |
          image_name=moneris-devlake
          if printf ${{ github.ref_name }} | grep -Pq '^v(\d+).(\d+).(\d+)$'; then
              echo "TAGS=${image_name}:latest,${image_name}:${{ github.ref_name }}" >> $GITHUB_OUTPUT
          else
              echo "TAGS=${image_name}:${{ github.ref_name }}" >> $GITHUB_OUTPUT
          fi
      - name: Build and push lake image
        run: |
          docker buildx create --use --name=builder
          docker buildx inspect --bootstrap
          docker buildx build \
            --cache-from ${{ env.ECR_NAME }}/devlake:amd64-builder \
            --cache-from ${{ env.ECR_NAME }}/devlake:base \
            --cache-from type=local,src=/tmp/devlake-build-cache-amd64 \
            --cache-from type=local,src=/tmp/devlake-build-cache-arm64 \
            --build-arg TAG=${{ github.ref_name }} \
            --build-arg SHA=${{ steps.get_short_sha.outputs.SHORT_SHA }} \
            --platform linux/amd64,linux/arm64 \
            --tag ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${{ steps.get_push_tags.outputs.TAGS }} \
            --push \
           ./backend
      - name: Clear cache
        uses: actions/github-script@v6
        if: always()
        with:
          script: |
            for (const arch of ['amd64', 'arm64']) {
              try {
                await github.rest.actions.deleteActionsCacheByKey({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  key: `buildx-devlake-build-cache-${context.runId}-${arch}`,
                })
                console.log(`Clear cache buildx-devlake-build-cache-${context.runId}-${arch}`)
              } catch (e) {
                console.warn(`Error clear cache buildx-devlake-build-cache-${context.runId}-${arch}: ${e}`)
              }
            }

  build-and-push-other-image:
    name: Build and Push ${{ matrix.build.name }} image
    runs-on: self-hosted
    strategy:
      matrix:
        build:
          - name: config-ui
            image: moneris-devlake-config-ui
            context: config-ui
          - name: grafana
            image: moneris-devlake-dashboard
            context: grafana
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.branch }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Install AWS
        run: | 
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --update
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::456519947111:role/icann-poc-dora-gh-aws
          role-session-name: Github
          aws-region: us-east-1
  
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        
      - name: Setup ECR
        run: |
          # Login to AWS ECR
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
  
      - name: Get push tags
        id: get_push_tags
        run: |
          image_name=${{ matrix.build.image }}
          if printf ${{ github.ref_name }} | grep -Pq '^v(\d+).(\d+).(\d+)$'; then
              echo "TAGS=${image_name}:latest,${image_name}:${{ github.ref_name }}" >> $GITHUB_OUTPUT
          else
              echo "TAGS=${image_name}:${{ github.ref_name }}" >> $GITHUB_OUTPUT
          fi
      - name: Build and push ${{ matrix.build.name }} image
        run: | 
          docker buildx create --use --name=builder
          docker buildx inspect --bootstrap
          docker buildx build \
            --push \
            --tag ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${{ steps.get_push_tags.outputs.TAGS }} \
            --platform linux/amd64,linux/arm64 \
            ./${{ matrix.build.context }}  