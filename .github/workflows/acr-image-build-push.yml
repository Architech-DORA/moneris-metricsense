name: ACR Image build and push
env:
  ACR_NAME: glqaacrdnclcacntest.azurecr.io
  ACR_USERNAME: ${{ secrets.ACR_USERNAME }}
  ACR_PASSWORD: ${{ secrets.ACR_PASSWORD }}
on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to deploy'
        required: true
jobs:
  build-and-push-builder:
    name: Build and Push devlake builder
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.branch }}        
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.ACR_NAME }}
          username: ${{ env.ACR_USERNAME }}
          password: ${{ env.ACR_PASSWORD }}
      - name: Build and push lake image
        run: |
          docker buildx create --use --name=builder
          docker buildx inspect --bootstrap
          docker buildx build --cache-from type=registry,ref=${{ env.ACR_NAME }}/devlake:amd64-builder --tag ${{ env.ACR_NAME }}/devlake:amd64-builder --platform linux/amd64 --target builder --push ./backend

  build-and-push-base:
    name: Build and Push devlake base
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.branch }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.ACR_NAME }}
          username: ${{ env.ACR_USERNAME }}
          password: ${{ env.ACR_PASSWORD }}
      - name: Build and push lake image
        run: |
          docker buildx create --use --name=builder
          docker buildx inspect --bootstrap
          docker buildx build --cache-from type=registry,ref=${{ env.ACR_NAME }}/devlake:base --tag ${{ env.ACR_NAME }}/devlake:base --platform linux/amd64,linux/arm64 --target base --push ./backend
  build-devlake:
    needs: build-and-push-builder
    name: Build and cache devlake
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: ["arm64", "amd64"]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.branch }}
      - name: Get short sha
        id: get_short_sha
        run: echo "SHORT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.ACR_NAME }}
          username: ${{ env.ACR_USERNAME }}
          password: ${{ env.ACR_PASSWORD }}
      - uses: actions/cache@v3
        with:
          path: /tmp/devlake-build-cache-${{ matrix.platform }}
          key: buildx-devlake-build-cache-${{ github.run_id }}-${{ matrix.platform }}
      - name: Build and cache lake build
        run: |
          docker buildx create --use --name=builder
          docker buildx inspect --bootstrap
          docker buildx build \
            --cache-from ${{ env.ACR_NAME }}/devlake:amd64-builder \
            --cache-to type=local,mode=min,dest=/tmp/devlake-build-cache-${{ matrix.platform }} \
            --build-arg TAG=${{ github.ref_name }} \
            --build-arg SHA=${{ steps.get_short_sha.outputs.SHORT_SHA }} \
            --target build \
            --platform linux/${{ matrix.platform }} \
            --tag ${{ env.ACR_NAME }}/devlake:build-cache-${{ matrix.platform }} \
            ./backend          
  build-and-push-devlake:
    needs: [build-devlake, build-and-push-base]
    name: Build and Push devlake image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.branch }}
      - name: Get short sha
        id: get_short_sha
        run: echo "SHORT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.ACR_NAME }}
          username: ${{ env.ACR_USERNAME }}
          password: ${{ env.ACR_PASSWORD }}
      - uses: actions/cache@v3
        with:
          path: /tmp/devlake-build-cache-amd64
          key: buildx-devlake-build-cache-${{ github.run_id }}-amd64
      - uses: actions/cache@v3
        with:
          path: /tmp/devlake-build-cache-arm64
          key: buildx-devlake-build-cache-${{ github.run_id }}-arm64
      - name: Get push tags
        id: get_push_tags
        run: |
          image_name=${{ env.ACR_NAME }}/devlake
          if printf ${{ github.ref_name }} | grep -Pq '^v(\d+).(\d+).(\d+)$'; then
              echo "TAGS=${image_name}:latest,${image_name}:${{ github.ref_name }}" >> $GITHUB_OUTPUT
          else
              echo "TAGS=${image_name}:${{ github.ref_name }}" >> $GITHUB_OUTPUT
          fi
      - name: Build and push lake image
        run: |
          docker buildx create --use --name=builder
          docker buildx inspect --bootstrap
          docker buildx build \
            --cache-from ${{ env.ACR_NAME }}/devlake:amd64-builder \
            --cache-from ${{ env.ACR_NAME }}/devlake:base \
            --cache-from type=local,src=/tmp/devlake-build-cache-amd64 \
            --cache-from type=local,src=/tmp/devlake-build-cache-arm64 \
            --build-arg TAG=${{ github.ref_name }} \
            --build-arg SHA=${{ steps.get_short_sha.outputs.SHORT_SHA }} \
            --platform linux/amd64,linux/arm64 \
            --tag ${{ steps.get_push_tags.outputs.TAGS }} \
            --push \
           ./backend
      - name: Clear cache
        uses: actions/github-script@v6
        if: always()
        with:
          script: |
            for (const arch of ['amd64', 'arm64']) {
              try {
                await github.rest.actions.deleteActionsCacheByKey({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  key: `buildx-devlake-build-cache-${context.runId}-${arch}`,
                })
                console.log(`Clear cache buildx-devlake-build-cache-${context.runId}-${arch}`)
              } catch (e) {
                console.warn(`Error clear cache buildx-devlake-build-cache-${context.runId}-${arch}: ${e}`)
              }
            }

  build-and-push-other-image:
    name: Build and Push ${{ matrix.build.name }} image
    runs-on: ubuntu-latest
    strategy:
      matrix:
        build:
          - name: config-ui
            image: devlake-config-ui
            context: config-ui
          - name: grafana
            image: devlake-dashboard
            context: grafana
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.branch }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.ACR_NAME }}
          username: ${{ env.ACR_USERNAME }}
          password: ${{ env.ACR_PASSWORD }}
      - name: Get push tags
        id: get_push_tags
        run: |
          image_name=${{ env.ACR_NAME }}/${{ matrix.build.image }}
          if printf ${{ github.ref_name }} | grep -Pq '^v(\d+).(\d+).(\d+)$'; then
              echo "TAGS=${image_name}:latest,${image_name}:${{ github.ref_name }}" >> $GITHUB_OUTPUT
          else
              echo "TAGS=${image_name}:${{ github.ref_name }}" >> $GITHUB_OUTPUT
          fi
      - name: Build and push ${{ matrix.build.name }} image
        run: | 
          docker buildx create --use --name=builder
          docker buildx inspect --bootstrap
          docker buildx build \
            --push \
            --tag ${{ steps.get_push_tags.outputs.TAGS }} \
            --platform linux/amd64,linux/arm64 \
            ./${{ matrix.build.context }}  
